{
    "react-spring": "BdApi.findModuleByProps('useSpring')",
    "@discord/utils": {
        "joinClassNames": "BdApi.findModule(e => e.toString().indexOf('return e.join(\" \")') > 200)",
        "useForceUpdate": "BdApi.findModuleByProps('useForceUpdate')?.useForceUpdate",
        "Logger": "BdApi.findModuleByProps('setLogFn')?.default",
        "Navigation": "BdApi.findModuleByProps('replaceWith', 'currentRouteIsPeekView')"
    },
    "@discord/components": {
        "Tooltip": "BdApi.findModuleByDisplayName('Tooltip')",
        "TooltipContainer": "BdApi.findModuleByProps('TooltipContainer')?.TooltipContainer",
        "TextInput": "BdApi.findModuleByDisplayName('TextInput')",
        "SlideIn": "BdApi.findModuleByDisplayName('SlideIn')",
        "SettingsNotice": "BdApi.findModuleByDisplayName('SettingsNotice')",
        "TransitionGroup": "BdApi.findModuleByDisplayName('TransitionGroup')",
        "Button": "BdApi.findModule(m => 'DropdownSizes' in m && typeof(m) === 'function')",
        "Popout": "BdApi.findModuleByDisplayName('Popout')",
        "Flex": "BdApi.findModuleByDisplayName('Flex')",
        "Text": "BdApi.findModuleByDisplayName('LegacyText')",
        "Card": "BdApi.findModuleByDisplayName('Card')"
    },
    "@discord/modules": {
        "Dispatcher": "BdApi.findModuleByProps('dispatch', 'isDispatching')",
        "ComponentDispatcher": "BdApi.findModuleByProps('ComponentDispatch')?.ComponentDispatch",
        "EmojiUtils": "BdApi.findModuleByProps('uploadEmoji')",
        "PermissionUtils": "BdApi.findModuleByProps('computePermissions', 'canManageUser')",
        "DMUtils": "BdApi.findModuleByProps('openPrivateChannel')"
    },
    "@discord/stores": {
        "Messages": "BdApi.findModuleByProps('getMessage', 'getMessages')",
        "Channels": "BdApi.findModuleByProps('getChannel', 'getDMFromUserId')",
        "Guilds": "BdApi.findModuleByProps('getGuild')",
        "SelectedGuilds": "BdApi.findModuleByProps('getGuildId', 'getLastSelectedGuildId')",
        "SelectedChannels": "BdApi.findModuleByProps('getChannelId', 'getLastSelectedChannelId')",
        "Info": "BdApi.findModuleByProps('getSessionId')",
        "Status": "BdApi.findModuleByProps('getStatus', 'getActivities', 'getState')",
        "Users": "BdApi.findModuleByProps('getUser', 'getCurrentUser')",
        "SettingsStore": "BdApi.findModuleByProps('afkTimeout', 'status')",
        "UserProfile": "BdApi.findModuleByProps('getUserProfile')",
        "Members": "BdApi.findModuleByProps('getMember')",
        "Activities": "BdApi.findModuleByProps('getActivities')",
        "Games": "BdApi.findModuleByProps('getGame', 'games')",
        "Auth": "BdApi.findModuleByProps('getId', 'isGuest')",
        "TypingUsers": "BdApi.findModuleByProps('isTyping')"
    },
    "@discord/actions": {
        "ProfileActions": "BdApi.findModuleByProps('fetchProfile')",
        "GuildActions": "BdApi.findModuleByProps('requestMembersById')"
    },
    "@discord/i18n": "BdApi.findModule(m => m.Messages?.CLOSE && typeof(m.getLocale) === 'function')",
    "@discord/constants": "BdApi.findModuleByProps('API_HOST')",
    "@discord/contextmenu": "module const ctx = Object.assign({}, BdApi.findModuleByProps('openContextMenu'), BdApi.findModuleByProps('MenuItem'));\nctx.Menu = ctx.default;\nreturn ctx;",
    "@discord/forms": "BdApi.findModuleByProps('FormItem')",
    "@discord/scrollbars": "BdApi.findModuleByProps('ScrollerAuto')",
    "@discord/native": "BdApi.findModuleByProps('requireModule')",
    "@discord/flux": "Object.assign({}, BdApi.findModuleByProps('useStateFromStores').default, BdApi.findModuleByProps('useStateFromStores'))",
    "@discord/modal": "Object.assign({}, BdApi.findModuleByProps('ModalRoot'), BdApi.findModuleByProps('openModal', 'closeAllModals'))",
    "@discord/connections": "BdApi.findModuleByProps('get', 'isSupported', 'map')",
    "@discord/sanitize": "BdApi.findModuleByProps('stringify', 'parse', 'encode')",
    "@discord/icons": "BdApi.findAllModules(m => m.displayName && ~m.toString().indexOf('currentColor')).reduce((icons, icon) => (icons[icon.displayName] = icon, icons), {})",
    "@discord/classes": {
        "Timestamp": "BdApi.findModuleByPrototypes('toDate', 'month')",
        "Message": "BdApi.findModuleByPrototypes('getReaction', 'isSystemDM')",
        "User": "BdApi.findModuleByPrototypes('tag')",
        "Channel": "BdApi.findModuleByPrototypes('isOwner', 'isCategory')"
    }
}
